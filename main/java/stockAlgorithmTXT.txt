
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.sql.*; 

public class stockAlgorithm {
    

   public static void main(String[] args) {
       try {
           Connection conn;
//           conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/numbers?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC", "root", "root");
            conn = DriverManager.getConnection("jdbc:mysql://localhost:1434/numbers?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC", "root", "root");
         //  conn = DriverManager.getConnection("jdbc:mysql://localhost:1434/numbers?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC", "root", "root");
//           conn=DriverManager.getConnection("jdbc:mysql://localhost:1434/numbers","root","root");  
           System.out.println("Connection established OwO");
//Connection  connection;
//   try {
//      Class.forName("com.mysql.jdbc.Driver");
//connection = DriverManager.getConnection("jdbc:mariadb:numbers://localhost:3306/", "root", "");
          
//          for (int i = 0; i < 100000; i++) {
//                         connection = DriverManager.getConnection("jdbc:mariadb://localhost:" + i + "/numbers?user=root&password=");
//           if (connection != null) {
//              System.out.println("Connection established  " + i);
//           }


//           connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/numbers?user=root&password=root");
//           if (connection != null) {
//              System.out.println("Connection established owo");
//           }
//
//           
//            Statement stmt = connection.createStatement();
//            stmt.executeUpdate("");
//            stmt.close();
//            connection.close();
//       } catch (SQLException ex) {
//           Logger.getLogger(stockAlgorithm.class.getName()).log(Level.SEVERE, null, ex);




for (double a = -1; a < 1; a = a + 0.1) {
    for (double b= -1; b < 1; b = b + 0.1) {
        for (double c = -1; c < 1; c = c + 0.1) {
            for (double d = 0; d < 0.01; d = d + 0.0001) {
                
                
                lfSimulate(a,b,c,d, 0.001, "btcTraining", conn);
            }
        }
    }
}








//           for (double a = 0; a < 1; a = a + 0.1) {
//           for (double b= 0; b < 1; b = b + 0.1) {
//           for (double c = 0; c < 1; c = c + 0.1) {
//           for (double d = 0; d < 1; d = d + 0.1) {
//           for (double e= 0; e < 1; e = e + 0.1) {
//           for (double f = 0; f < 1; f = f + 0.1) {             
//
//           }
//           }
//           }
//           }
//           }
//           }
       } catch (SQLException ex) {
           Logger.getLogger(stockAlgorithm.class.getName()).log(Level.SEVERE, null, ex);
       }
           
           
       }
   

public static double lfSimulate(double one, double two, double three, double sensitivity, double fee, String table, Connection conn) {
    

    double valueIn =0;
    double valueOut = 1000;
    double value = 0;
    double valueTotal = valueIn + valueOut;
       try {
           
            Statement stmt = conn.createStatement();
            String findSize = "SELECT MAX(id) FROM "+ table + ";"; // Make query
            ResultSet rset = stmt.executeQuery(findSize); // Sent query        
            int size = rset.getInt("id");
            

            double currentPrice = 0;
            double lastPrice = 0;
            double pastPriceA = 0;
            double pastPriceB = 0;
            double currentAverage = currentPrice/lastPrice;
            double xDayMovingAverage = currentPrice/pastPriceA;
            double yDayMovingAverage = currentPrice/pastPriceB;
            double doubleGet = 0;
            int intGet =0;
            int rowCount = 0;
            double decision =0;
            String strSelect = "";
            for (int i = 150; i < size; i++) {

                strSelect = "SELECT close FROM "+ table + " WHERE id = '" + i + "';"; // Make query
                rset = stmt.executeQuery(strSelect); // Send query
                currentPrice = rset.getDouble(strSelect);
                strSelect = "SELECT close FROM "+ table + " WHERE id = '" + (i-1) + "';"; // Make query
                rset = stmt.executeQuery(strSelect); // Send query
                lastPrice = rset.getDouble(strSelect);
                strSelect = "SELECT close FROM "+ table + " WHERE id = '" + (i-60) + "';"; // Make query
                rset = stmt.executeQuery(strSelect); // Send query
                pastPriceA = rset.getDouble(strSelect);
                strSelect = "SELECT close FROM "+ table + " WHERE id = '" + (i-120) + "';"; // Make query
                rset = stmt.executeQuery(strSelect);
                pastPriceB = rset.getDouble(strSelect);
                
                
                valueIn = valueIn * currentAverage;
                decision = (currentAverage*one + xDayMovingAverage*two + yDayMovingAverage*three)/3;
                
                if (decision > sensitivity) {
                 valueIn = (valueIn + valueOut)*fee;   
                }
                
                if (decision < (sensitivity*-1)) {
                valueIn = (valueIn + valueOut)*fee; 
                }
                
                System.out.println(valueIn + " / " + valueOut + " / " + valueTotal);
                
//                while(rset.next()) {   // Move the cursor to the next row, return false if no more row
//           Double word = rset.getDouble("word");
//           System.out.println(word);
//   
//              }
         }

         
         
           } catch (SQLException ex) {
           Logger.getLogger(stockAlgorithm.class.getName()).log(Level.SEVERE, null, ex);
       }
    return value;
}




   
   
public static double optimal(double one, double two, double three, double four, double five, double six) {
double x = 1;
double currentVolume = 0;
double currentPrice = 0;
double xDayMovingAverage = 0;
double yDayMovingAverage = 0;
double factor1 = xDayMovingAverage * one; // Average over long period of time
double factor2 = yDayMovingAverage * two; // Average over short period of time
double factor3 = 0;
double factor4 =0;
double factor5 =0;





double odds = 0;



return x;
}
}   


